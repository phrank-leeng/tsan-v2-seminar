@inproceedings{flanagan,
	author = {Flanagan, Cormac and Freund, Stephen},
	year = {2009},
	month = {06},
	pages = {121-133},
	title = {{FastTrack: Efficient and Precise Dynamic Race Detection}},
	volume = {53},
	journal = {Communications of The ACM - CACM},
	doi = {10.1145/1542476.1542490}
}

@article{sulzmann,
	author       = {Martin Sulzmann and
	Kai Stadtm{\"{u}}ller},
	title        = {{Efficient, Near Complete and Often Sound Hybrid Dynamic Data Race
	Prediction (extended version)}},
	journal      = {CoRR},
	volume       = {abs/2004.06969},
	year         = {2020},
	url          = {https://arxiv.org/abs/2004.06969},
	eprinttype    = {arXiv},
	eprint       = {2004.06969},
	timestamp    = {Tue, 21 Apr 2020 16:51:52 +0200},
	biburl       = {https://dblp.org/rec/journals/corr/abs-2004-06969.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{SWB-1830643851,
	title = {{Distributed Computing and Intelligent Technology : 19th International Conference, ICDCIT 2023, Bhubaneswar, India, January 18–22, 2023, Proceedings}},
	series = {Lecture Notes in Computer Science ; 13776},
	editor = {Anisur Rahaman Molla and Gokarna Sharma and Pradeep Kumar and Sanjay Rawat},
	address = {Cham},
	publisher = {Springer Nature Switzerland},
	year = {2023},
	edition = {1st ed. 2023.},
	isbn = {9783031248481},
	size = {1 Online-Ressource(XXIII, 376 p. 174 illus., 130 illus. in color.)},
	URL = {https://link.springer.com/book/10.1007/978-3-031-24848-1},
}


@article{FAVA2020102473,
	title = {{Ready, set, Go!: Data-race detection and the Go language}},
	journal = {Science of Computer Programming},
	volume = {195},
	pages = {102473},
	year = {2020},
	issn = {0167-6423},
	doi = {https://doi.org/10.1016/j.scico.2020.102473},
	url = {https://www.sciencedirect.com/science/article/pii/S0167642320300836},
	author = {Daniel Schnetzer Fava and Martin Steffen},
	keywords = {Concurrency, Synchronization, Message passing, Data-race detection, Golang},
	abstract = {Data races are often discussed in the context of lock acquisition and release, with race-detection algorithms routinely relying on vector clocks as a means of capturing the relative ordering of events from different threads. In this paper, we present a data-race detector for a language with channel communication as its sole synchronization primitive, and provide a semantics directly tied to the happens-before relation, thus forging the notion of vector clocks.}
}

@article{lamport,
	author = {Lamport, Leslie},
	title = {{Time, Clocks, and the Ordering of Events in a Distributed System}},
	year = {1978},
	issue_date = {July 1978},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {21},
	number = {7},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/359545.359563},
	doi = {10.1145/359545.359563},
	abstract = {The concept of one event happening before another in a distributed system is examined, and is shown to define a partial ordering of the events. A distributed algorithm is given for synchronizing a system of logical clocks which can be used to totally order the events. The use of the total ordering is illustrated with a method for solving synchronization problems. The algorithm is then specialized for synchronizing physical clocks, and a bound is derived on how far out of synchrony the clocks can become.},
	journal = {Commun. ACM},
	month = {jul},
	pages = {558–565},
	numpages = {8},
	keywords = {computer networks, distributed systems, clock synchronization, multiprocess systems}
}


@misc{sulzmann2,
	author = {Martin Sulzmann},
	title = {Dynamic data race prediction},
	url = {https://sulzmann.github.io/AutonomeSysteme/lec-data-race.html},
	addendum= {accessed Jun. 5, 2023}
}


@article{marthur,
	author = {Mathur, Umang and Kini, Dileep and Viswanathan, Mahesh},
	title = {{What Happens-after the First Race? Enhancing the Predictive Power of Happens-before Based Dynamic Race Detection}},
	year = {2018},
	issue_date = {November 2018},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {2},
	number = {OOPSLA},
	url = {https://doi.org/10.1145/3276515},
	doi = {10.1145/3276515},
	abstract = {Dynamic race detection is the problem of determining if an observed program execution reveals the presence of a data race in a program. The classical approach to solving this problem is to detect if there is a pair of conflicting memory accesses that are unordered by Lamport’s happens-before (HB) relation. HB based race detection is known to not report false positives, i.e., it is sound. However, the soundness guarantee of HB only promises that the first pair of unordered, conflicting events is a schedulable data race. That is, there can be pairs of HB-unordered conflicting data accesses that are not schedulable races because there is no reordering of the events of the execution, where the events in race can be executed immediately after each other. We introduce a new partial order, called schedulable happens-before (SHB) that exactly characterizes the pairs of schedulable data races — every pair of conflicting data accesses that are identified by SHB can be scheduled, and every HB-race that can be scheduled is identified by SHB. Thus, the SHB partial order is truly sound. We present a linear time, vector clock algorithm to detect schedulable races using SHB. Our experiments demonstrate the value of our algorithm for dynamic race detection — SHB incurs only little performance overhead and can scale to executions from real-world software applications without compromising soundness.},
	journal = {Proc. ACM Program. Lang.},
	month = {oct},
	articleno = {145},
	numpages = {29},
	keywords = {Dynamic Program Analysis, Happens-Before, Race Detection, Concurrency, Soundness}
}

@inproceedings{10.1145/1133981.1134018,
	author = {Naik, Mayur and Aiken, Alex and Whaley, John},
	title = {Effective Static Race Detection for Java},
	year = {2006},
	isbn = {1595933204},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1133981.1134018},
	doi = {10.1145/1133981.1134018},
	abstract = {We present a novel technique for static race detection in Java programs, comprised of a series of stages that employ a combination of static analyses to successively reduce the pairs of memory accesses potentially involved in a race. We have implemented our technique and applied it to a suite of multi-threaded Java programs. Our experiments show that it is precise, scalable, and useful, reporting tens to hundreds of serious and previously unknown concurrency bugs in large, widely-used programs with few false alarms.},
	booktitle = {Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	pages = {308–319},
	numpages = {12},
	keywords = {multi-threading, static race detection, Java, synchronization, concurrency},
	location = {Ottawa, Ontario, Canada},
	series = {PLDI '06}
}



@article{naik,
	author = {Naik, Mayur and Aiken, Alex and Whaley, John},
	title = {Effective Static Race Detection for Java},
	year = {2006},
	issue_date = {June 2006},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {41},
	number = {6},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/1133255.1134018},
	doi = {10.1145/1133255.1134018},
	abstract = {We present a novel technique for static race detection in Java programs, comprised of a series of stages that employ a combination of static analyses to successively reduce the pairs of memory accesses potentially involved in a race. We have implemented our technique and applied it to a suite of multi-threaded Java programs. Our experiments show that it is precise, scalable, and useful, reporting tens to hundreds of serious and previously unknown concurrency bugs in large, widely-used programs with few false alarms.},
	journal = {SIGPLAN Not.},
	month = {jun},
	pages = {308–319},
	numpages = {12},
	keywords = {synchronization, static race detection, concurrency, Java, multi-threading}
}




